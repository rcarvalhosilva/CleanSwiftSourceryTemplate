{% macro interactorUseCases implemented %}
{% for useCase in type.containedTypes %}
{% for type in useCase.containedTypes where type.localName == "Request" and type|annotated:"method" %}
  func {{type.annotations.method}}(request: {{ type.name }}){% if implemented %} {
    {% for type in useCase.containedTypes where type.localName == "Response" and type|annotated:"method" %}
      presenter.{{type.annotations.method}}(response: .init())
    {% endfor %}
  } {% endif %}
{% endfor %}
{% endfor %}
{% endmacro %}

{% macro interactorSpyBody %}
{% for useCase in type.containedTypes %}
{% for type in useCase.containedTypes where type.localName == "Request" and type|annotated:"method" %}

  private(set) var {{type.annotations.method}}Called = false
  private(set) var {{type.annotations.method}}RequestPassed: {{ type.name }}?
  func {{type.annotations.method}}(request: {{ type.name }}) {
    {{type.annotations.method}}Called = true
    {{type.annotations.method}}RequestPassed = request
  }
{% endfor %}
{% endfor %}
{% endmacro %}

{% macro interactorTestsBody %}
{% for useCase in type.containedTypes %}
{% for requestType in useCase.containedTypes where requestType.localName == "Request" and requestType|annotated:"method" %}
{% for responseType in useCase.containedTypes where responseType.localName == "Response" and responseType|annotated:"method" %}

  func test_{{requestType.annotations.method}}_callsPresenter{{responseType.annotations.method|upperFirstLetter}}() {
    sut.{{requestType.annotations.method}}(request: .init())

    XCTAssertTrue(presenterSpy.{{responseType.annotations.method}}Called)
  }
{% endfor %}
{% endfor %}
{% endfor %}
{% endmacro %}

{% macro presenterUseCases implemented %}
{% for useCase in type.containedTypes %}
{% for type in useCase.containedTypes where type.localName == "Response" and type|annotated:"method" %}
  func {{type.annotations.method}}(response: {{ type.name }}){% if implemented %} {
    {% for type in useCase.containedTypes where type.localName == "ViewModel" and type|annotated:"method" %}
      view?.{{type.annotations.method}}(viewModel: .init())
    {% endfor %}
  } {% endif %}
{% endfor %}
{% endfor %}
{% endmacro %}

{% macro presenterTestsBody %}
{% for useCase in type.containedTypes %}
{% for responseType in useCase.containedTypes where responseType.localName == "Response" and responseType|annotated:"method" %}
{% for viewModelType in useCase.containedTypes where viewModelType.localName == "ViewModel" and viewModelType|annotated:"method" %}

  func test_{{responseType.annotations.method}}_callsView{{viewModelType.annotations.method|upperFirstLetter}}() {
    sut.{{responseType.annotations.method}}(response: .init())

    XCTAssertTrue(viewSpy.{{viewModelType.annotations.method}}Called)
  }
{% endfor %}
{% endfor %}
{% endfor %}
{% endmacro %}

{% macro presenterSpyBody %}
{% for useCase in type.containedTypes %}
{% for type in useCase.containedTypes where type.localName == "Response" and type|annotated:"method" %}

  private(set) var {{type.annotations.method}}Called = false
  private(set) var {{type.annotations.method}}ResponsePassed: {{ type.name }}?
  func {{type.annotations.method}}(response: {{ type.name }}) {
    {{type.annotations.method}}Called = true
    {{type.annotations.method}}ResponsePassed = response
  }
{% endfor %}
{% endfor %}
{% endmacro %}

{% macro viewUseCases implemented %}
{% for useCase in type.containedTypes %}
{% for type in useCase.containedTypes where type.localName == "ViewModel" and type|annotated:"method" %}
  func {{type.annotations.method}}(viewModel: {{ type.name }}){% if implemented %} {} {% endif %}
{% endfor %}
{% endfor %}
{% endmacro %}

{% macro viewSpyBody %}
{% for useCase in type.containedTypes %}
{% for type in useCase.containedTypes where type.localName == "ViewModel" and type|annotated:"method" %}

  private(set) var {{type.annotations.method}}Called = false
  private(set) var {{type.annotations.method}}ViewModelPassed: {{ type.name }}?
  func {{type.annotations.method}}(viewModel: {{ type.name }}) {
    {{type.annotations.method}}Called = true
    {{type.annotations.method}}ViewModelPassed = response
  }
{% endfor %}
{% endfor %}
{% endmacro %}



{% for type in types.based.Scene where type.isExtension == false %}
// sourcery:file:Source/{{ type.name }}Interactor.swift
protocol {{ type.name }}BusinessLogic {
  {% call interactorUseCases false%}
}

final class {{ type.name }}Interactor: {{ type.name }}BusinessLogic {
  private let presenter: {{ type.name }}PresentationLogic

  init(presenter: {{ type.name }}PresentationLogic) {
    self.presenter = presenter
  }

  {% call interactorUseCases true%}
}
// sourcery:end

// sourcery:file:Spies/{{ type.name }}BusinessLogicSpy.swift
final class {{ type.name }}BusinessLogicSpy: {{{ type.name }}BusinessLogic {
  {% call interactorSpyBody %}
}
// sourcery:end

// sourcery:file:Tests/{{ type.name }}InteractorTests.swift
import XCTest

final class {{ type.name }}InteractorTests: XCTestCase {
  private let presenterSpy = {{ type.name }}PresentationLogicSpy()
  private lazy var sut = {{ type.name }}Interactor(presenter: presenterSpy)
  {% call interactorTestsBody %}
}
// sourcery:end

// sourcery:file:Source/{{ type.name }}Presenter.swift
protocol {{ type.name }}PresentationLogic {
  {% call presenterUseCases false%}
}

final class {{ type.name }}Presenter: {{ type.name }}PresentationLogic {
  var view: {{ type.name }}DisplayLogic?

  {% call presenterUseCases true%}
}
// sourcery:end

// sourcery:file:Tests/{{ type.name }}PresenterTests.swift
import XCTest

final class {{ type.name }}PresenterTests: XCTestCase {
  private let viewSpy = {{ type.name }}DisplayLogicSpy()
  private let sut = {{ type.name }}ViewController()

  override func setUp() {
    sut.view = viewSpy
  }
  {% call presenterTestsBody %}
}
// sourcery:end

// sourcery:file:Spies/{{ type.name }}PresentationLogicSpy.swift
final class {{ type.name }}PresentationLogicSpy: {{ type.name }}PresentationLogic {
  {% call presenterSpyBody %}
}
// sourcery:end

// sourcery:file:Source/{{ type.name }}ViewController.swift
import UIKit

protocol {{ type.name }}DisplayLogic {
  {% call viewUseCases false%}
}

final class {{ type.name }}ViewController: UIViewController, {{ type.name }}DisplayLogic {
  private let interactor: {{ type.name }}BusinessLogic

  init(interactor: {{ type.name }}BusinessLogic) {
    self.interactor = interactor
  }

  {% call viewUseCases true%}
}
// sourcery:end

// sourcery:file:Spies/{{ type.name }}DisplayLogicSpy.swift
final class {{ type.name }}DisplayLogicSpy: {{ type.name }}DisplayLogic {
  {% call viewSpyBody %}
}
// sourcery:end

{% endfor %}
